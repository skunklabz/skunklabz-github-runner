name: Build GitHub Runners

on:
  schedule:
    # Check for updates every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # Allow manual triggering
  repository_dispatch:
    # Allow external triggers
    types: [runner-images-updated]

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}
      latest-commit: ${{ steps.check.outputs.latest-commit }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Initialize submodules
        run: |
          echo "Initializing submodules..."
          git submodule update --init --recursive
          echo "Submodule status:"
          git submodule status
      
      - name: Verify submodule structure
        run: |
          echo "Verifying submodule structure..."
          if [ ! -d "runner-images" ]; then
            echo "ERROR: runner-images submodule not found!"
            exit 1
          fi
          if [ ! -d "runner-images/images/ubuntu" ]; then
            echo "ERROR: Ubuntu images directory not found in submodule!"
            exit 1
          fi
          echo "✓ Submodule structure verified"
          ls -la runner-images/images/ubuntu/
      
      - name: Check for updates
        id: check
        run: |
          # Get the latest commit from Microsoft's runner-images main branch
          LATEST_COMMIT=$(curl -s https://api.github.com/repos/actions/runner-images/branches/main | jq -r '.commit.sha')
          
          # Get the current commit from our submodule
          CURRENT_COMMIT=$(git submodule status --cached | grep "runner-images" | awk '{print $1}')
          
          echo "Latest Microsoft commit: $LATEST_COMMIT"
          echo "Current submodule commit: $CURRENT_COMMIT"
          
          if [ "$LATEST_COMMIT" != "$CURRENT_COMMIT" ]; then
            echo "has-updates=true" >> $GITHUB_OUTPUT
            echo "latest-commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
            echo "Updates available!"
          else
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "latest-commit=$CURRENT_COMMIT" >> $GITHUB_OUTPUT
            echo "No updates available."
          fi

  update-submodule:
    needs: check-updates
    if: needs.check-updates.outputs.has-updates == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Initialize submodules
        run: |
          echo "Initializing submodules..."
          git submodule update --init --recursive
          echo "Submodule status:"
          git submodule status
      
      - name: Verify submodule structure
        run: |
          echo "Verifying submodule structure..."
          if [ ! -d "runner-images" ]; then
            echo "ERROR: runner-images submodule not found!"
            exit 1
          fi
          if [ ! -d "runner-images/images/ubuntu" ]; then
            echo "ERROR: Ubuntu images directory not found in submodule!"
            exit 1
          fi
          echo "✓ Submodule structure verified"
          ls -la runner-images/images/ubuntu/
      
      - name: Update submodule
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git submodule update --remote
          git add runner-images
          git commit -m "Update runner-images submodule to ${{ needs.check-updates.outputs.latest-commit }}"
          git push
      
      - name: Trigger build workflow
        run: |
          # Trigger the build workflow in the same repository
          gh workflow run build-runners.yml --ref main

  build-runners:
    needs: [check-updates, update-submodule]
    if: needs.check-updates.outputs.has-updates == 'true'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        ubuntu-version: ['24.04']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Initialize submodules
        run: |
          echo "Initializing submodules..."
          git submodule update --init --recursive
          echo "Submodule status:"
          git submodule status
      
      - name: Verify submodule structure
        run: |
          echo "Verifying submodule structure..."
          if [ ! -d "runner-images" ]; then
            echo "ERROR: runner-images submodule not found!"
            exit 1
          fi
          if [ ! -d "runner-images/images/ubuntu" ]; then
            echo "ERROR: Ubuntu images directory not found in submodule!"
            exit 1
          fi
          echo "✓ Submodule structure verified"
          ls -la runner-images/images/ubuntu/
      
      - name: Generate Dockerfiles
        run: |
          echo "Generating Dockerfiles from Microsoft's runner-images..."
          chmod +x scripts/generate-dockerfiles.sh
          ./scripts/generate-dockerfiles.sh
          echo "✓ Dockerfiles generated"
          ls -la dockerfiles/ubuntu/24.04/
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Ubuntu ${{ matrix.ubuntu-version }} runner
        run: |
          cd dockerfiles/ubuntu/${{ matrix.ubuntu-version }}
          docker build -t skunklabz/ubuntu-${{ matrix.ubuntu-version }}-runner:latest .
          docker tag skunklabz/ubuntu-${{ matrix.ubuntu-version }}-runner:latest skunklabz/ubuntu-${{ matrix.ubuntu-version }}-runner:${{ needs.check-updates.outputs.latest-commit }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Push Docker images
        run: |
          docker push skunklabz/ubuntu-${{ matrix.ubuntu-version }}-runner:latest
          docker push skunklabz/ubuntu-${{ matrix.ubuntu-version }}-runner:${{ needs.check-updates.outputs.latest-commit }}
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}-${{ needs.check-updates.outputs.latest-commit }}
          release_name: Release v${{ github.run_number }} - ${{ needs.check-updates.outputs.latest-commit }}
          body: |
            Automated build triggered by Microsoft runner-images update

            - Ubuntu 24.04 runner: `skunklabz/ubuntu-24.04-runner:${{ needs.check-updates.outputs.latest-commit }}`

            Latest commit: ${{ needs.check-updates.outputs.latest-commit }}
          draft: false
          prerelease: false
